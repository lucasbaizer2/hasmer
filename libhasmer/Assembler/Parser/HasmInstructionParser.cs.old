using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Hasmer.Assembler.Parser {
    /// <summary>
    /// Represents a Hasm instruction and its operands.
    /// </summary>
    public class HasmInstructionToken : HasmToken {
        /// <summary>
        /// The name of the instruction.
        /// </summary>
        public string Instruction { get; set; }

        /// <summary>
        /// The operands passed to the instruction.
        /// </summary>
        public List<HasmOperandToken> Operands { get; set; }

        public HasmInstructionToken(int state) : base(state) { }
    }

    /// <summary>
    /// Parses a Hasm instruction.
    /// </summary>
    public class HasmInstructionParser : IHasmTokenParser {
        public bool CanParse(HasmReaderState asm) {
            // throw new NotImplementedException();

            string instruction = asm.Stream.PeekWord();
            return instruction != null;
        }

        public HasmToken Parse(HasmReaderState asm) {
            int state = asm.Stream.SaveState();
            string instruction = asm.Stream.AdvanceWord();

            HbcInstructionDefinition def = asm.BytecodeFormat.Definitions.Find(def => def.Name == instruction);
            if (def == null) {
                throw new HasmParserException(asm.Stream, $"unknown instruction: '{instruction}'");
            }

            if (!asm.IsExact) {
                // any instruction which takes a cache index should have the cache index removed in auto mode
                if (def.Name == "GetById" || def.Name == "TryGetById" || def.Name == "PutById" || def.Name == "TryPutById"
                    || def.Name == "GetByIdShort" || def.Name == "GetByIdLong" || def.Name == "TryGetByIdLong" || def.Name == "PutByIdLong" || def.Name == "TryPutByIdLong") {
                    List<HbcInstructionOperandType> operandTypes = new List<HbcInstructionOperandType>(def.OperandTypes);
                    operandTypes.RemoveAt(2); // remove the cache index

                    def = new HbcInstructionDefinition {
                        Name = def.Name,
                        AbstractDefinition = def.AbstractDefinition,
                        IsJump = def.IsJump,
                        Opcode = def.Opcode,
                        OperandTypes = operandTypes
                    };
                }
            }

            HasmInstructionToken token = new HasmInstructionToken(state) {
                Instruction = instruction,
                Operands = new List<HasmOperandToken>()
            };
            for (int i = 0; i < def.OperandTypes.Count; i++) {
                if (token.Operands.Count > 0) {
                    if (asm.Stream.AdvanceOperator() != ",") {
                        throw new HasmParserException(asm.Stream, "expecting ','");
                    }
                }
                HasmOperandParser parser = new HasmOperandParser(def, i);
                token.Operands.Add((HasmOperandToken)parser.Parse(asm));
            }

            return token;
        }
    }
}
